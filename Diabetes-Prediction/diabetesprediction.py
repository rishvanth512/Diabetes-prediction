# -*- coding: utf-8 -*-
"""diabetesprediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y6AHLMTIP2CI7vsttPB7CpL2NfGaYuN9

**Importing the required number of libraries for the program to run**
"""

import numpy as np
import pandas as pd

from sklearn.preprocessing import StandardScaler

from sklearn import svm

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')



"""Uploading the dataset with the path and assigning it to the variable"""

# loading the diabetes dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

"""Displaying the first five entries in the data to get an idea of how the data looks like"""

diabetes_dataset.head()

"""## Data Visualization

Displaying the number of non-diabetic and diabteic people in the dataset
"""

sns.countplot(x = 'Outcome',data = diabetes_dataset)

"""Bar Graph of Each Column with respect to the outcome"""

sns.barplot(x='Outcome',y='Glucose',data=diabetes_dataset,palette="Blues")

"""The glucose and outcome relation could be seen as glucose increases the outcome of being diabetic also increases"""

sns.barplot(x='Outcome',y='Pregnancies',data=diabetes_dataset,palette="Blues")

"""The glucose and outcome relation could be seen as propotional ,glucose increases the outcome of being diabetic also increases

Outcome with respect to insulin
"""

sns.barplot(x='Outcome',y='Insulin',data=diabetes_dataset,palette="Blues")

"""The glucose and outcome relation could be seen as insulin increases the outcome of being diabetic also increases

Relation between Outcome and BMI
"""

sns.barplot(x='Outcome',y='BMI',data=diabetes_dataset,palette="Blues")

"""The BMI and outcome relation could be seen as glucose increases the outcome of being diabetic also increases(less difference as compared to others)

Relation between Diabetes Pedigree Function and Outcome
"""

sns.barplot(x='Outcome',y='DiabetesPedigreeFunction',data=diabetes_dataset,palette="Blues")

"""The Diabetes Pedeigree function and outcome relation could be seen as glucose increases the outcome of being diabetic also increases"""

Relation betwewn Age and Outcome

sns.barplot(x='Outcome',y='Age',data=diabetes_dataset,palette="Blues")

"""The age and outcome relation could be seen as age increases the outcome of being diabetic also increases

As seen the increase of the all the columns or attributes can increase our outcome of having diabetes

Heat Map

Making a heat map so as to classify which columns greatly affect our outcome
"""

cor=diabetes_dataset.corr()
sns.heatmap(cor, annot = True)
plt.show()

"""As we can see the Age,BMI,Insulin and glucose are the ones which are having a high corelation with the result of being diabetic or not(i.e the outcome)

---

Describing the data finding out mean,count,minimum value,maximum value and other important details.
"""

diabetes_dataset.describe()

"""---

Splitting data into two labels(Data preprocessing)
"""

P=diabetes_dataset.drop(columns='Outcome',axis=1)
Q=diabetes_dataset['Outcome']

"""P will contain all rows and columns except the outcome,
axis=1 indicates removal of a column 
"""

print(P)

"""Q would contain only the outcome column"""

print(Q)

"""Data Standardization

There are different range of values for the differnt columns so in order to achieve higher accuracy we standardize the data
"""

standardscaler= StandardScaler()

standardscaler.fit(P)

# After fit,transforming and storing it in s_data
s_data=standardscaler.transform(P)

#printing the new data with less differences between values
print(s_data)

#storing it back in P
P=s_data
print(P)



"""Splitting of the two variables into test and train,so that the model gets trained by particular data and is tested upon different data"""

P_train, P_test, Q_train, Q_test = train_test_split(P,Q, test_size = 0.2, stratify=Q, random_state=23)

"""We are choosing the test size to be of 20%

Printing the original  no P data and then split between the test and train
"""

print(P.shape, P_train.shape, P_test.shape)

"""Training the model"""

train = svm.SVC(kernel='linear')

"""Training the model within our given values  of training values
(SVM)
"""

train.fit(P_train, Q_train)

"""Finding the training accuracy with the function training_accuracy"""

P_prediction = train.predict(P_train)
training_accuracy = accuracy_score(P_prediction, Q_train)

"""Printing the accuracy of the model(Training)"""

print('The accuracy of training data is  : ', training_accuracy*100,'%')

"""Printing the accuracy of the model(Testing)"""

testing_prediction = train.predict(P_test)
test_accuracy = accuracy_score(testing_prediction, Q_test)

print('The accuracy of test data set is ',test_accuracy*100,'%')

"""Using and predicting with naive bayes algorithm"""

from sklearn.naive_bayes import GaussianNB
bayes = GaussianNB()
bayes.fit(P_train, Q_train)

testing_prediciton_nb=bayes.predict(P_test)

test_accuracybayes = accuracy_score(testing_prediciton_nb, Q_test)

"""Testing and predicting with RandomForestClassifier"""

from sklearn.ensemble import RandomForestClassifier
randomf = RandomForestClassifier(n_estimators = 12, criterion = 'entropy', random_state = 32)
randomf.fit(P_train, Q_train)

testing_prediction_ranfor = randomf.predict(P_test)
test_accuracy_ranfor = accuracy_score(testing_prediction_ranfor,Q_test)

"""Printing the accuracy of all three algorithms"""

print('The accuracy of test data set in SVM ',test_accuracy*100,'%')
print('The accuracy of test data set in Bayes algorithm is  ',test_accuracybayes*100,'%')
print('The accuracy of test data set in random forest method   is  ',test_accuracy_ranfor*100,'%')

"""As we can see that the accuracy of the data set is higheer of SVM and naive bayes as compared to randomforest.

# Finding the outcome(Diabetic or not with input values)

Here the user inputs values for finding out that he has diabetis or not
(Note: Please change calues of the array as per the order in the dataser.)
"""

#input or replace values in this array as per the order of the data
#array=[pregnacies,glucose,bloodpressure,skinthickness,insulin,bmi,diabetespdogreefunction,age]
array=[2,120,60,20,120,30,0.2,30]

check=np.asarray(array)

check1=check.reshape(1,-1)

input=standardscaler.transform(check1)
print(input)

#prints the value of the data which is tranformed and standardized as we did earler for higher accuracy

"""Run this block  after running the above block to find out if if person is diabetic or not accoirding to algorithm """

predict_valuesgiven=train.predict(input)
print(predict_valuesgiven)

if(predict_valuesgiven[0]==1):
    print("The person is diabetic")
else:
    print("NO,The person is not diabetic")

"""As we saw with our describe function the mean and other important factors of the dataset

"""

As we saw with our describe function the mean and other important factors of the dataset

diabetes_dataset.describe()

"""We will try and compute for the mean values of each value"""

#input or replace values in this array as per the order of the data
#array=[pregnacies,glucose,bloodpressure,skinthickness,insulin,bmi,diabetespdogreefunction,age]
#array=[3,120,69,20,79,31,0.471,33]

check=np.asarray(array)

check1=check.reshape(1,-1)

input=standardscaler.transform(check1)
print(input)



predict_valuesgiven=train.predict(input)
print(predict_valuesgiven)

if(predict_valuesgiven[0]==1):
    print("The person is diabetic")
else:
    print("NO,the person is not diabetic")

"""Now we check for all the values which are above 75 per cent as per our describe function and analysis of data we can say that the outcome should be 1(i.e diabetic)"""



#input or replace values in this array as per the order of the data
#array=[pregnacies,glucose,bloodpressure,skinthickness,insulin,bmi,diabetespdogreefunction,age]

array=[6.000000,140.250000,80.000000,32.000000,127.250000,36.600000,0.626250,41.000000]
#array=[preg,gluc,bp,skin,ins,bmi,dpf,age]
check=np.asarray(array)

check1=check.reshape(1,-1)

input=standardscaler.transform(check1)
print(input)

predict_valuesgiven=train.predict(input)
print(predict_valuesgiven)

if(predict_valuesgiven[0]==1):
    print("The person is diabetic")
else:
    print("NO,the person is not diabetic")

"""Getting results as Diabetic, as predicted from our describe function

Now lets keep the values of glucose,insulin,age and bmi as it is 75% higher values and all other values at the mean.(Beacuse our heat map said that glucose,insulin,age and bmi have high a correlation between the outcome as comapred
"""

#input or replace values in this array as per the order of the data
#array=[pregnacies,glucose,bloodpressure,skinthickness,insulin,bmi,diabetespdogreefunction,age]

array=[3,140.25000,80.0000,20.5,127.250000,36.6,0.47,41]

check=np.asarray(array)

check1=check.reshape(1,-1)

input=standardscaler.transform(check1)
print(input)



predict_valuesgiven=train.predict(input)
print(predict_valuesgiven)

if(predict_valuesgiven[0]==1):
    print("The person is diabetic")
else:
    print("NO,the person is not diabetic")

"""The outcome is diabetic as was predicted by our heat map that glucose,insulin bmi and age have a greater impact on the outcome"""



check1=array.reshape(1,-1)

input=standardscaler.transform(check1)
print(input)

predict_valuesgiven=train.predict(input)
print(predict_valuesgiven)

if(predict_valuesgiven[0]==1):
    print("Diabates")
else:
    print("NO")

